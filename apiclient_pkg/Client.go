/*
 * o3rest
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/27/2016
 */
package apiclient_pkg

import (
	"encoding/json"

	"github.com/o3ma/o3rest"
	"github.com/o3ma/o3rest/apihelper_pkg"
	"github.com/o3ma/o3rest/models_pkg"
	"github.com/o3ma/unirest-go"
)

/*
 * Client structure as interface implementation
 */
type APICLIENT_IMPL struct{}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CheckRequest        body     parameter: Optional
 * @return	Returns the *models_pkg.CheckResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentityCheck(
	body *models_pkg.CheckRequest) (*models_pkg.CheckResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/check"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.CheckResponse = &models_pkg.CheckResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.MatchRequest        body     parameter: Optional
 * @return	Returns the *models_pkg.MatchResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentityMatch(
	body *models_pkg.MatchRequest) (*models_pkg.MatchResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/match"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.MatchResponse = &models_pkg.MatchResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.LinkEmailRequest        body     parameter: Optional
 * @return	Returns the *models_pkg.LinkEmailResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentityLinkEmail(
	body *models_pkg.LinkEmailRequest) (*models_pkg.LinkEmailResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/link_email"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.LinkEmailResponse = &models_pkg.LinkEmailResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CheckRevocationKeyRequest        body     parameter: Optional
 * @return	Returns the *models_pkg.CheckRevocationKeyResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentityCheckRevocationKey(
	body *models_pkg.CheckRevocationKeyRequest) (*models_pkg.CheckRevocationKeyResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/check_revocation_key"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.CheckRevocationKeyResponse = &models_pkg.CheckRevocationKeyResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CheckRevocationKeyStage2Request        body     parameter: Optional
 * @return	Returns the *models_pkg.CheckRevocationKeyStage2Response response from the API call
 */
func (me *APICLIENT_IMPL) IdentityCheckRevocationKeyStage2(
	body *models_pkg.CheckRevocationKeyStage2Request) (*models_pkg.CheckRevocationKeyStage2Response, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/check_revocation_key"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.CheckRevocationKeyStage2Response = &models_pkg.CheckRevocationKeyStage2Response{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.LinkEmailStage2Request        body     parameter: Optional
 * @return	Returns the *models_pkg.LinkEmailStage2Response response from the API call
 */
func (me *APICLIENT_IMPL) IdentityLinkEmailStage2(
	body *models_pkg.LinkEmailStage2Request) (*models_pkg.LinkEmailStage2Response, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/link_email"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.LinkEmailStage2Response = &models_pkg.LinkEmailStage2Response{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CreateRequest        body     parameter: Optional
 * @return	Returns the *models_pkg.CreateResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentityCreate(
	body *models_pkg.CreateRequest) (*models_pkg.CreateResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/create"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.CreateResponse = &models_pkg.CreateResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CreateStage2Request        body     parameter: Optional
 * @return	Returns the *models_pkg.CreateStage2Response response from the API call
 */
func (me *APICLIENT_IMPL) IdentityCreateStage2(
	body *models_pkg.CreateStage2Request) (*models_pkg.CreateStage2Response, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/create"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.CreateStage2Response = &models_pkg.CreateStage2Response{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SetFeaturelevelRequest        body     parameter: Optional
 * @return	Returns the *models_pkg.SetFeaturelevelResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentitySetFeaturelevel(
	body *models_pkg.SetFeaturelevelRequest) (*models_pkg.SetFeaturelevelResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/set_featurelevel"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.SetFeaturelevelResponse = &models_pkg.SetFeaturelevelResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SetFeaturelevelStage2Request        body     parameter: Optional
 * @return	Returns the *models_pkg.SetFeaturelevelStage2Response response from the API call
 */
func (me *APICLIENT_IMPL) IdentitySetFeaturelevelStage2(
	body *models_pkg.SetFeaturelevelStage2Request) (*models_pkg.SetFeaturelevelStage2Response, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/set_featurelevel"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.SetFeaturelevelStage2Response = &models_pkg.SetFeaturelevelStage2Response{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.MatchStage2Request        body     parameter: Optional
 * @return	Returns the *models_pkg.MatchStage2Response response from the API call
 */
func (me *APICLIENT_IMPL) IdentityMatchStage2(
	body *models_pkg.MatchStage2Request) (*models_pkg.MatchStage2Response, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/match"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.MatchStage2Response = &models_pkg.MatchStage2Response{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string        id     parameter: Required
 * @return	Returns the *models_pkg.GetPubKeyResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentityById(
	id string) (*models_pkg.GetPubKeyResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/{id}"

	//variable to hold errors
	var err error = nil
	//process optional query parameters
	_queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{}{
		"id": id,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "Threema/4.33A",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.Get(_queryBuilder, headers)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.GetPubKeyResponse = &models_pkg.GetPubKeyResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SetRevocationKeyRequest        body     parameter: Optional
 * @return	Returns the *models_pkg.SetRevocationKeyResponse response from the API call
 */
func (me *APICLIENT_IMPL) IdentitySetRevocationKey(
	body *models_pkg.SetRevocationKeyRequest) (*models_pkg.SetRevocationKeyResponse, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/set_revocation_key"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.SetRevocationKeyResponse = &models_pkg.SetRevocationKeyResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SetRevocationKeyStage2Request        body     parameter: Optional
 * @return	Returns the *models_pkg.SetRevocationKeyStage2Response response from the API call
 */
func (me *APICLIENT_IMPL) IdentitySetRevocationKeyStage2(
	body *models_pkg.SetRevocationKeyStage2Request) (*models_pkg.SetRevocationKeyStage2Response, error) {
	//the base uri for api requests
	_queryBuilder := o3rest.BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + "/identity/set_revocation_key"

	//variable to hold errors
	var err error = nil
	//validate and preprocess url
	_queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}

	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":   "Threema/4.33A",
		"accept":       "application/json",
		"content-type": "application/json; charset=utf-8",
	}

	//prepare API request
	_request := unirest.Post(_queryBuilder, headers, body)
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *models_pkg.SetRevocationKeyStage2Response = &models_pkg.SetRevocationKeyStage2Response{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil
}
